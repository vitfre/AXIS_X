
ACCESSORY_DEVICE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000016c  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006b4  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000092f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000300  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000171  00000000  00000000  00000c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000227  00000000  00000000  00000dff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000005c  00000000  00000000  00001028  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000136  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000178  00000000  00000000  000011ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00001332  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__vector_1>
   4:	1d c0       	rjmp	.+58     	; 0x40 <__bad_interrupt>
   6:	1c c0       	rjmp	.+56     	; 0x40 <__bad_interrupt>
   8:	1b c0       	rjmp	.+54     	; 0x40 <__bad_interrupt>
   a:	25 c0       	rjmp	.+74     	; 0x56 <__vector_5>
   c:	19 c0       	rjmp	.+50     	; 0x40 <__bad_interrupt>
   e:	18 c0       	rjmp	.+48     	; 0x40 <__bad_interrupt>
  10:	17 c0       	rjmp	.+46     	; 0x40 <__bad_interrupt>
  12:	16 c0       	rjmp	.+44     	; 0x40 <__bad_interrupt>
  14:	15 c0       	rjmp	.+42     	; 0x40 <__bad_interrupt>
  16:	14 c0       	rjmp	.+40     	; 0x40 <__bad_interrupt>
  18:	13 c0       	rjmp	.+38     	; 0x40 <__bad_interrupt>
  1a:	12 c0       	rjmp	.+36     	; 0x40 <__bad_interrupt>
  1c:	11 c0       	rjmp	.+34     	; 0x40 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf ed       	ldi	r28, 0xDF	; 223
  24:	cd bf       	out	0x3d, r28	; 61

00000026 <__do_copy_data>:
  26:	10 e0       	ldi	r17, 0x00	; 0
  28:	a0 e6       	ldi	r26, 0x60	; 96
  2a:	b0 e0       	ldi	r27, 0x00	; 0
  2c:	ec e6       	ldi	r30, 0x6C	; 108
  2e:	f1 e0       	ldi	r31, 0x01	; 1
  30:	02 c0       	rjmp	.+4      	; 0x36 <__do_copy_data+0x10>
  32:	05 90       	lpm	r0, Z+
  34:	0d 92       	st	X+, r0
  36:	a2 36       	cpi	r26, 0x62	; 98
  38:	b1 07       	cpc	r27, r17
  3a:	d9 f7       	brne	.-10     	; 0x32 <__do_copy_data+0xc>
  3c:	16 d0       	rcall	.+44     	; 0x6a <main>
  3e:	94 c0       	rjmp	.+296    	; 0x168 <_exit>

00000040 <__bad_interrupt>:
  40:	df cf       	rjmp	.-66     	; 0x0 <__vectors>

00000042 <__vector_1>:

//****************************************************************************************
// External Interrupt 0 service routine
//****************************************************************************************
ISR (INT0_vect)
{
  42:	1f 92       	push	r1
  44:	0f 92       	push	r0
  46:	0f b6       	in	r0, 0x3f	; 63
  48:	0f 92       	push	r0
  4a:	11 24       	eor	r1, r1
	//---------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------
	return;
};
  4c:	0f 90       	pop	r0
  4e:	0f be       	out	0x3f, r0	; 63
  50:	0f 90       	pop	r0
  52:	1f 90       	pop	r1
  54:	18 95       	reti

00000056 <__vector_5>:

//****************************************************************************************
// Timer0 overflow interrupt service routine
//****************************************************************************************
ISR (TIMER0_OVF_vect)
{
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1
	//---------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------
	return;
};
  60:	0f 90       	pop	r0
  62:	0f be       	out	0x3f, r0	; 63
  64:	0f 90       	pop	r0
  66:	1f 90       	pop	r1
  68:	18 95       	reti

0000006a <main>:
static void init_periphery (void)
{
	//---------------------------------------------------------------------------------------
	// Crystal Oscillator division factor: 1
	//#pragma optsize-
	CLKPR=0x80;
  6a:	80 e8       	ldi	r24, 0x80	; 128
  6c:	86 bd       	out	0x26, r24	; 38
	CLKPR=0x00;
  6e:	16 bc       	out	0x26, r1	; 38
	//---------------------------------------------------------------------------------------
	// Input/Output Ports initialization
	// Port B initialization
	// Func5=Out Func4=Out Func3=Out Func2=In Func1=In Func0=In
	// State5=0 State4=0 State3=0 State2=P State1=P State0=P
	PORTB=0x17;
  70:	97 e1       	ldi	r25, 0x17	; 23
  72:	98 bb       	out	0x18, r25	; 24
	DDRB=0x28;
  74:	98 e2       	ldi	r25, 0x28	; 40
  76:	97 bb       	out	0x17, r25	; 23
	// Clock source: System Clock
	// Clock value: Timer 0 Stopped
	// Mode: Normal top=0xFF
	// OC0A output: Disconnected
	// OC0B output: Disconnected
	TCCR0A=0x00;
  78:	1a bc       	out	0x2a, r1	; 42
	TCCR0B=0x00;
  7a:	13 be       	out	0x33, r1	; 51
	TCNT0=0x00;
  7c:	12 be       	out	0x32, r1	; 50
	OCR0A=0x00;
  7e:	19 bc       	out	0x29, r1	; 41
	OCR0B=0x00;
  80:	18 bc       	out	0x28, r1	; 40
	// OC1A output: Disconnected
	// OC1B output: Disconnected
	// Timer1 Overflow Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	PLLCSR=0x00;
  82:	17 bc       	out	0x27, r1	; 39

	TCCR1=0x00;
  84:	10 be       	out	0x30, r1	; 48
	GTCCR=0x00;
  86:	1c bc       	out	0x2c, r1	; 44
	TCNT1=0x00;
  88:	1f bc       	out	0x2f, r1	; 47
	OCR1A=0x00;
  8a:	1e bc       	out	0x2e, r1	; 46
	OCR1B=0x00;
  8c:	1b bc       	out	0x2b, r1	; 43
	OCR1C=0x00;
  8e:	1d bc       	out	0x2d, r1	; 45

	// External Interrupt(s) initialization
	// INT0: On
	// INT0 Mode: Falling Edge
	// Interrupt on any change on pins PCINT0-5: Off
	GIMSK=0x40;
  90:	90 e4       	ldi	r25, 0x40	; 64
  92:	9b bf       	out	0x3b, r25	; 59
	MCUCR=0x02;
  94:	42 e0       	ldi	r20, 0x02	; 2
  96:	45 bf       	out	0x35, r20	; 53
	GIFR=0x40;
  98:	9a bf       	out	0x3a, r25	; 58

	// Timer(s)/Counter(s) Interrupt(s) initialization
	TIMSK=0x00;
  9a:	19 be       	out	0x39, r1	; 57

	// Universal Serial Interface initialization
	// Mode: Disabled
	// Clock source: Register & Counter=no clk.
	// USI Counter Overflow Interrupt: Off
	USICR=0x00;
  9c:	1d b8       	out	0x0d, r1	; 13

	// Analog Comparator initialization
	// Analog Comparator: Off
	ACSR=0x80;
  9e:	88 b9       	out	0x08, r24	; 8
	ADCSRB=0x00;
  a0:	13 b8       	out	0x03, r1	; 3
	DIDR0=0x00;
  a2:	14 ba       	out	0x14, r1	; 20

	// ADC initialization
	// ADC disabled
	ADCSRA=0x00;
  a4:	16 b8       	out	0x06, r1	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	8f e1       	ldi	r24, 0x1F	; 31
  a8:	9e e4       	ldi	r25, 0x4E	; 78
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x40>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x46>
  b0:	00 00       	nop
			else
			{
				CLK_OUT_OFF;
			};
			//---------------------------------------------------------------------------------------
			for (unsigned int j=0x00;((j<speed)&&(EN==0x00));j++)
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	70 e0       	ldi	r23, 0x00	; 0
			};
			//---------------------------------------------------------------------------------------
		}else
		{
			//---------------------------------------------------------------------------------------
			if (CS==0x00)
  b6:	a0 e1       	ldi	r26, 0x10	; 16
				};
				//---------------------------------------------------------------------------------------
				if (temp_speed==0)
				{
					//---------------------------------------------------------------------------------------
					speed=1;
  b8:	e1 e0       	ldi	r30, 0x01	; 1
  ba:	f0 e0       	ldi	r31, 0x00	; 0
	//---------------------------------------------------------------------------------------
    while(1)
    {
        //TODO:: Please write your application code 
		//---------------------------------------------------------------------------------------
		if (EN==0x00)				
  bc:	b4 99       	sbic	0x16, 4	; 22
  be:	1f c0       	rjmp	.+62     	; 0xfe <__stack+0x1f>
		{
			//---------------------------------------------------------------------------------------
			if (CLK_OUT==0x00)
  c0:	c3 99       	sbic	0x18, 3	; 24
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <main+0x5e>
			{
				CLK_OUT_ON;
  c4:	c3 9a       	sbi	0x18, 3	; 24
  c6:	01 c0       	rjmp	.+2      	; 0xca <main+0x60>
			}
			else
			{
				CLK_OUT_OFF;
  c8:	c3 98       	cbi	0x18, 3	; 24
			};
			//---------------------------------------------------------------------------------------
			for (unsigned int j=0x00;((j<speed)&&(EN==0x00));j++)
  ca:	80 91 60 00 	lds	r24, 0x0060
  ce:	90 91 61 00 	lds	r25, 0x0061
  d2:	89 2b       	or	r24, r25
  d4:	99 f3       	breq	.-26     	; 0xbc <main+0x52>
  d6:	b4 99       	sbic	0x16, 4	; 22
  d8:	f1 cf       	rjmp	.-30     	; 0xbc <main+0x52>
  da:	cb 01       	movw	r24, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	cf e8       	ldi	r28, 0x8F	; 143
  de:	d1 e0       	ldi	r29, 0x01	; 1
  e0:	21 97       	sbiw	r28, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <__stack+0x1>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <__stack+0x7>
  e6:	00 00       	nop
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	40 91 60 00 	lds	r20, 0x0060
  ee:	50 91 61 00 	lds	r21, 0x0061
  f2:	84 17       	cp	r24, r20
  f4:	95 07       	cpc	r25, r21
  f6:	10 f7       	brcc	.-60     	; 0xbc <main+0x52>
  f8:	b4 9b       	sbis	0x16, 4	; 22
  fa:	f0 cf       	rjmp	.-32     	; 0xdc <main+0x72>
  fc:	df cf       	rjmp	.-66     	; 0xbc <main+0x52>
			};
			//---------------------------------------------------------------------------------------
		}else
		{
			//---------------------------------------------------------------------------------------
			if (CS==0x00)
  fe:	b2 9b       	sbis	0x16, 2	; 22
 100:	1a c0       	rjmp	.+52     	; 0x136 <__stack+0x57>
 102:	dc cf       	rjmp	.-72     	; 0xbc <main+0x52>
 104:	d2 e0       	ldi	r29, 0x02	; 2
 106:	da 95       	dec	r29
 108:	f1 f7       	brne	.-4      	; 0x106 <__stack+0x27>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <__stack+0x2d>
				unsigned int temp_speed=0x00;
				//---------------------------------------------------------------------------------------
				for (unsigned char bit = 0; bit < 16; bit++)
				{
					//---------------------------------------------------------------------------------------
					while(CLK==0x01)
 10c:	b1 99       	sbic	0x16, 1	; 22
 10e:	fa cf       	rjmp	.-12     	; 0x104 <__stack+0x25>
					{
						_delay_us(1);
					};
					temp_speed |= S_DATA_IN;
 110:	56 b3       	in	r21, 0x16	; 22
 112:	25 2f       	mov	r18, r21
 114:	21 70       	andi	r18, 0x01	; 1
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	82 2b       	or	r24, r18
 11a:	93 2b       	or	r25, r19
					temp_speed <<= 1;
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
					while(CLK==0x00)
 120:	b1 99       	sbic	0x16, 1	; 22
 122:	06 c0       	rjmp	.+12     	; 0x130 <__stack+0x51>
 124:	52 e0       	ldi	r21, 0x02	; 2
 126:	5a 95       	dec	r21
 128:	f1 f7       	brne	.-4      	; 0x126 <__stack+0x47>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <__stack+0x4d>
 12c:	b1 9b       	sbis	0x16, 1	; 22
 12e:	fa cf       	rjmp	.-12     	; 0x124 <__stack+0x45>
 130:	41 50       	subi	r20, 0x01	; 1
			if (CS==0x00)
			{
				//---------------------------------------------------------------------------------------
				unsigned int temp_speed=0x00;
				//---------------------------------------------------------------------------------------
				for (unsigned char bit = 0; bit < 16; bit++)
 132:	19 f4       	brne	.+6      	; 0x13a <__stack+0x5b>
 134:	05 c0       	rjmp	.+10     	; 0x140 <__stack+0x61>
			};
			//---------------------------------------------------------------------------------------
		}else
		{
			//---------------------------------------------------------------------------------------
			if (CS==0x00)
 136:	4a 2f       	mov	r20, r26
 138:	cb 01       	movw	r24, r22
				unsigned int temp_speed=0x00;
				//---------------------------------------------------------------------------------------
				for (unsigned char bit = 0; bit < 16; bit++)
				{
					//---------------------------------------------------------------------------------------
					while(CLK==0x01)
 13a:	b1 99       	sbic	0x16, 1	; 22
 13c:	e3 cf       	rjmp	.-58     	; 0x104 <__stack+0x25>
 13e:	e8 cf       	rjmp	.-48     	; 0x110 <__stack+0x31>
						_delay_us(1);
					};
					//---------------------------------------------------------------------------------------
				};
				//---------------------------------------------------------------------------------------
				if (temp_speed==0)
 140:	00 97       	sbiw	r24, 0x00	; 0
 142:	29 f4       	brne	.+10     	; 0x14e <__stack+0x6f>
				{
					//---------------------------------------------------------------------------------------
					speed=1;
 144:	f0 93 61 00 	sts	0x0061, r31
 148:	e0 93 60 00 	sts	0x0060, r30
 14c:	04 c0       	rjmp	.+8      	; 0x156 <__stack+0x77>
					//---------------------------------------------------------------------------------------
				} 
				else
				{
					//---------------------------------------------------------------------------------------
					speed=temp_speed;
 14e:	90 93 61 00 	sts	0x0061, r25
 152:	80 93 60 00 	sts	0x0060, r24
					//---------------------------------------------------------------------------------------
				};
				//---------------------------------------------------------------------------------------
				while(CS==0x00)
 156:	b2 99       	sbic	0x16, 2	; 22
 158:	b1 cf       	rjmp	.-158    	; 0xbc <main+0x52>
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	8a 95       	dec	r24
 15e:	f1 f7       	brne	.-4      	; 0x15c <__stack+0x7d>
 160:	00 c0       	rjmp	.+0      	; 0x162 <__stack+0x83>
 162:	b2 9b       	sbis	0x16, 2	; 22
 164:	fa cf       	rjmp	.-12     	; 0x15a <__stack+0x7b>
 166:	aa cf       	rjmp	.-172    	; 0xbc <main+0x52>

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
